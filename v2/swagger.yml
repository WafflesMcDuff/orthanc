swagger: "2.0"
info:
  description: "This version of orthanc follows the RESTful API methodology."
  version: "2.0.0"
  title: "Orthanc"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api.eosfrontier.space"
basePath: "/api/orthanc/v2"
schemes:
- "https"
paths:
  /character:
    get:
      tags:
       - "character"
      summary: "Returns character details based on id or meta."
      operationId: "getCharacter(s)"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "token"
        description: "provides authentication"
        required: true
        type: string
      - in: "header"
        name: "id"
        description: "Character ID to return details for."
        type: string
      - in: "header"
        name: "meta"
        type: object
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "character not found"
        "405":
          description: "Validation exception"
    post:
      tags:
      - "character"
      summary: "Adds a new character"
      description: ""
      operationId: "addcharacter"
      consumes:
      - "application/headers"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "token"
        description: "provides authentication"
        required: true
        type: string
      - in: "header"
        name: "id"
        type: string
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
      - "character"
      summary: "Update an existing character"
      description: ""
      operationId: "updatecharacter"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: header
        name: "token"
        type: string
        description: "character object that needs to be added to the store"
        required: true
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "character not found"
        "405":
          description: "Validation exception"
  /character/meta:
    get:
      tags:
      - "character"
      - "meta"
      summary: "Returns character meta"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findcharactersByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: ""
        "400":
          description: "Invalid status value"
  /character/skills:
    get:
      tags:
      - "character"
      - "skills"
      summary: "Finds characters by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findcharactersByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: ""
        "400":
          description: "Invalid tag value"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Character:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"